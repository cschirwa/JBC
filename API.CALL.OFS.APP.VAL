SUBROUTINE API.CALL.OFS.APP.VAL(V$OFS.SOURCE.ID, V$APP.VERSION, V$FUNC.OPTION,
                            V$USER, V$PASSWD, V$ID, V$FLDVAL, V$RESULT)

*------------------------------------------------------------------------------
* DESCRIPTION:
*
* API routine
* Builds OFS message based on information supplied, and then feeds it to
* OFS.GLOBUS.MANAGER (the Globus processor).  The result is returned to the
* calling procedure

* CC20181213 - THIS IS AN EXTENTION OF API.CALL.OFS.APP
* Now the message may be processed using OGM or OPM or both, depending on the OPTION parameter (second value of V$FUNC.OPTION)
*_______________________________________________________________________________
* INCOMING PARAMETERS:
*
* V$OFS.SOURCE.ID - Key to OFS.SOURCE "GLOBUS"-type record
* V$APP.VERSION   - Application or Application,Version to run
* V$FUNC.OPTION   - <1> - Function to use AND <2> the additional OPTION (see Description above)
*                    The OPTION can be "VALIDATE" or "OGM"
* V$USER          - User under whose credentials the call will run
* V$PASSWD        - Password of aforementioned user
* V$ID            - ID of record to work with; empty means generate a new one
* V$FLDVAL        - Field name (optional :MVNO:SVNO) ..=.. Field value
*_______________________________________________________________________________
* RETURNED DATA:
*
* V$ID             - ID generated by OFS call (if empty initially)
* V$RESULT     <1> - Return status (1=OK, -1/-2/-3=error occurred, as per OFS
*                    success/fail indicator, see manuals)
*              <2> - Output error message from OFS (if error occurred,
*                    otherwise OK)
*              <3> - OFS formatted initial message
*              <4> - OFS formatted resulting message
*_______________________________________________________________________________
* NOTES:
*_______________________________________________________________________________
* Change Log:
* ID YYYYMMDD FLASTNAME DESCRIPTION
* 04 20181213 Calvin    Modifications allowing the OFS message to be processed
*                       using OGM or OPM or both using OGM VALIDATE first,
*                       depending on the OPTION parameter (second value of V$FUNC.OPTION)
********************************************************************************

$INSERT I_COMMON
$INSERT I_EQUATE

********************************************************************************
* MAIN PROGRAM FLOW
********************************************************************************

    GOSUB INITIALIZE

    GOSUB OFS.HEADER
    GOSUB OFS.BODY
    MSG$VALIDATED = @TRUE ;* by deafault

    IF DO$CALL.OGM THEN

        GOSUB CALL.OGM  ;* will call OFS.GLOBUS.MANAGER with OR without VALIDATION
        GOSUB PARSE.OGM.RESULT
        MSG$VALIDATED = (V$RESULT<1> = 1)

    END


    IF DO$POST.OFS AND MSG$VALIDATED THEN

       GOSUB POST.OFS   ;* OFS.POST.MESSAGE

    END


RETURN
********************************************************************************
OFS.HEADER:
    * Build header
   L$OFS.HEADER = ""
   L$OFS.HEADER<1> = L$APP                                             ;* ofsOperation
   *L$OFS.HEADER<2> = L$VER:"/":V$FUNCTION                             ;* ofsOptions
   L$OFS.OPTIONS = L$VER:"/":V$FUNCTION      ;* this will be added to header in FORMAT.OFS.MSG gosub
   L$OFS.HEADER<3> = (IF V$USER THEN V$USER:"/":V$PASSWD ELSE "")   ;* ofsUserInfo
   L$OFS.HEADER<4> = V$ID                                             ;* ofsTransactionID

RETURN
********************************************************************************
OFS.BODY:
    * Build body
   L$OFS.BODY = ""
   FOR I = 1 TO DCOUNT(V$FLDVAL, FM)

      * [CHG.02 <]
      IF V$FLDVAL<I> =SCHEDULE.DELIMITER THEN
          L$OFS.BODY<-1> = V$FLDVAL<I>
      END ELSE
      * [CHG.02 >]

          L$FLD = FIELD(V$FLDVAL<I>, "=", 1, 1)
          L$VAL = FIELD(V$FLDVAL<I>, "=", 2, 999)
          * Ensure syntax is correct if no MV/SV numbers supplied
          IF NOT(INDEX(L$FLD, ":", 1)) THEN L$FLD := "::"
          * Replace commas with question marks (as per OFS message syntax notes)
          CONVERT "," TO "?" IN L$VAL
          L$OFS.BODY<-1> = L$FLD :"=" :L$VAL
      END
   NEXT I
RETURN
********************************************************************************
INITIALIZE:

   SCHEDULE.DELIMITER='//' ;* [CHG.02]

   L$OFS.MSG = ""
   L$APP = FIELD(V$APP.VERSION, ",", 1)
   L$VER = FIELD(V$APP.VERSION, ",", 2)

   CONVERT VM:"/" TO FM:FM IN V$FUNC.OPTION
   V$FUNCTION = V$FUNC.OPTION<1>
   V$OPTION   = V$FUNC.OPTION<2>

   GOSUB CHECK.OPTION

   V$RESULT = ''
   RETURN
********************************************************************************
CHECK.OPTION:

    DO$VALIDATE = (V$OPTION[1,3] = "VAL")

    DO$JUST.OGM = ((V$OPTION = "OLD") OR (V$OPTION = "OGM"))

    DO$POST.OFS = DO$VALIDATE OR NOT(DO$JUST.OGM)

    DO$CALL.OGM = DO$JUST.OGM OR DO$VALIDATE
   RETURN
********************************************************************************
FORMAT.OFS.MSG:
   L$OFS.OPTIONS["/", 3, 1] = L$OFS.OPERATION.FLAG
   L$OFS.HEADER<2> = L$OFS.OPTIONS
   L$OFS.MSG = L$OFS.HEADER : FM : L$OFS.BODY

    * [CHG.02 <]
   L$OFS.MSG=CHANGE(L$OFS.MSG, FM:SCHEDULE.DELIMITER:FM,SCHEDULE.DELIMITER)
   * [CHG.02 >]
   CONVERT FM TO "," IN L$OFS.MSG

   V$RESULT<3> = L$OFS.MSG

RETURN
********************************************************************************
CALL.OGM:

    IF DO$VALIDATE THEN
        L$OFS.OPERATION.FLAG = "VALIDATE"
    END

    GOSUB FORMAT.OFS.MSG

    CALL OFS.GLOBUS.MANAGER(V$OFS.SOURCE.ID, L$OFS.MSG)

   RETURN
********************************************************************************
POST.OFS:

    L$OFS.OPERATION.FLAG = ""

    GOSUB FORMAT.OFS.MSG

    CALL OFS.POST.MESSAGE(L$OFS.MSG, L$OFS.MSG.ID, V$OFS.SOURCE.ID, '')

    V$RESULT<1> = 1
    V$RESULT<2> = "OK"
    V$RESULT<4> = ",":L$OFS.MSG.ID; * in a lot of subroutines the ofs result

   RETURN
********************************************************************************
PARSE.OGM.RESULT:
    SENSITIVITY=''
    * Retrieve OFS exit status (success/fail indicator)
    V$RESULT<1> = FIELD(FIELD(L$OFS.MSG, "/", 3, 1), ",", 1, 1)
    * Retrieve new transaction ID, if necessary
    IF NOT(V$ID) THEN V$ID = FIELD(L$OFS.MSG, "/", 1, 1)

    BEGIN CASE
    CASE V$RESULT<1> < 0
       * Retrieve error details
       V$RESULT<2> = FIELD(L$OFS.MSG, ",", 2, 1)
    CASE V$RESULT<1> = ""
       * In case that OFS didn't even get the chance to run, and instead
       * returned a more general error message
       V$RESULT<1> = -1 ;* set it anyway
       V$RESULT<2> = L$OFS.MSG
    CASE V$RESULT<1> = 1
       V$RESULT<2> = "OK"
    END CASE

    V$RESULT<4> = L$OFS.MSG
   RETURN

END
