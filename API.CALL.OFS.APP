SUBROUTINE API.CALL.OFS.APP(LP$OFS.SOURCE, LP$APP.VERSION, LP$FUNCTION, LP$USER, LP$PASS, LP$ID, LP$FLDVAL, LP$RESULT)

********************************************************************************
* DESCRIPTION:
*
* API routine
*
* Build and process OFS message based on information supplied.
* 
* Example:
*   CALL API.CALL.OFS('', 'LD,DEMO', 'I', '', '', 'LD0000000001', 'SHORT.NAME=TEST':@FM:'STREET=TEST', LP$RESULT)
*_______________________________________________________________________________
* INCOMING PARAMETERS:
*
* LP$OFS.SOURCE     - ID of OFS.SOURCE (can be empty for ONLINE processing)
* LP$APP.VERSION    - APPLICATION or APPLICATION,VERSION to run
* LP$FUNCTION<1>    - Function to use (I/VALIDATE)
* LP$FUNCTION<2, 1> - Set to 'ONLINE' for process message immediately or 'MSG' to get formated OFS request
* LP$FUNCTION<2, 2> - Timeout in seconds for ONLINE processing (default is 20sec)
* LP$USER           - SIGN.ON.NAME (can be empty, for current user)
* LP$PASS           - PASSWORD (can be empty, for current user or BATCH OFS.SOURCE)
* LP$ID             - ID of record to work with; empty means generate a new one
* LP$FLDVAL         - Field name ..=.. Field value
*                     The delimiter "//" between LD and SCHEDULE legs of OFS should be
*                     in separate field (e.g. ...FM://:FM...)
*_______________________________________________________________________________
* RETURNED DATA:
*
* LP$ID            - ID generated by OFS call
* LP$RESULT    <1> - Return status (1=OK, -1/-2/-3=error occurred)
*              <2> - Output error message from OFS (if error occurred, otherwise OK)
*              <3> - OFS formatted initial message
*              <4> - OFS formatted resulting message
*_______________________________________________________________________________
* NOTES:
*_______________________________________________________________________________
* CHANGELOG:
* ID YYYYMMDD FLASTNAME DESCRIPTION
*
* 01 20040809 LFratila  Initial development
* 02 20050526 VTonu     Modification allowing to add LD.SCHEDULE.DEFINE leg of OFS
*                       in the message
* 03 20090408 VTonu     Modifications required in R06 to call OFS.POST.MESSAGE
* 04 20110523 VTonu(DG) Implements ONLINE OFS processing
********************************************************************************
* <Rating>111</Rating>
********************************************************************************

$INSERT I_COMMON
$INSERT I_GTS.COMMON
$INSERT I_F.USER
$INSERT I_F.SPF
$INSERT I_F.OFS.SOURCE

********************************************************************************

EQU REQUEST.TIMEOUT TO 20 ;* in seconds
EQU SCHEDULE.DELIMITER TO '//'

********************************************************************************
   LP$RESULT = ''
   
   * get current user 
   IF NOT(LP$USER) THEN
      LP$USER = R.USER<EB.USE.SIGN.ON.NAME>
      IF NOT(LP$USER) THEN
         LP$USER = 'INPUTT'
      END
   END

   * Build header
   L$OFS.MSG = LP$APP.VERSION[',', 1, 1]:',':LP$APP.VERSION[',', 2, 1]:'/'
   L$OFS.MSG := LP$FUNCTION<1>:','
   L$OFS.MSG := LP$USER:'/':LP$PASS:','
   L$OFS.MSG := CHANGE(LP$ID, ',', '?'):','
   
   * Build body
   TEMP.BODY = ''
   I.LEN = DCOUNT(LP$FLDVAL, @FM)
   FOR I = 1 TO I.LEN
      L$FLDVAL = LP$FLDVAL<I>
      L$FLD = L$FLDVAL['=', 1, 1]
      IF L$FLD = SCHEDULE.DELIMITER THEN
         TEMP.BODY = TEMP.BODY[1, -2]:SCHEDULE.DELIMITER
      END ELSE

         IF NOT(INDEX(L$FLD, ':', 1)) THEN
            L$FLD := '::'
         END
         TEMP.BODY := L$FLD:'=':CHANGE(L$FLDVAL['=', 2, DCOUNT(L$FLDVAL, '=')], ',', '?'):','
      END
   NEXT I
   
   * append body to request message
   IF TEMP.BODY[1] = ',' THEN
      L$OFS.MSG := TEMP.BODY[1, -2]
   END ELSE
      L$OFS.MSG := TEMP.BODY
   END

   * fill result with request message
   LP$RESULT<3> = L$OFS.MSG
  
   
   * return only formated ofs request message
   IF LP$FUNCTION<2, 1> = 'MSG' THEN
      LP$RESULT<1> = 1
      RETURN
   END
   

   * processing with R05 globus manager
   IF LP$OFS.SOURCE AND TRANS('F.SPF', 'SYSTEM', SPF.CURRENT.RELEASE, 'X')[1, 3] = 'R05' THEN
      SENSITIVITY = ''
      CALL OFS.GLOBUS.MANAGER(LP$OFS.SOURCE, L$OFS.MSG)
      SENSITIVITY = ''
      
      OFS.BODY = L$OFS.MSG[INDEX(L$OFS.MSG, '/', 2), -1]
      OFS.BODY = OFS.BODY[INDEX(OFS.BODY, ',', 1) + 1, -1]
      
      LP$RESULT<1> = L$OFS.MSG['/', 3, 1][',', 1, 1]
      LP$RESULT<4> = ',':L$OFS.MSG['/', 1, 1]
      IF LP$RESULT<1> = 1 THEN
         LP$RESULT<2> = 'OK'
         LP$ID = L$OFS.MSG['/', 1, 1]
      END ELSE
         LP$RESULT<2> = OFS.BODY
         IF NOT(LP$ID) THEN
            LP$ID = L$OFS.MSG['/', 1, 1]
         END
      END      
      
      RETURN
   END

   * process OFS (POST)
   IF LP$FUNCTION<2, 1> <> 'ONLINE' THEN
      CALL OFS.POST.MESSAGE(L$OFS.MSG, LP$ID, LP$OFS.SOURCE, '')   
 
      LP$RESULT<1> = 1
      LP$RESULT<2> = 'OK'
      LP$RESULT<4> = ',':LP$ID; * in a lot of subroutines the ofs result
      RETURN
   END
   
   * process OFS (ONLINE)
   OFS.REQUEST.ID = ''
   CALL ALLOCATE.UNIQUE.TIME(OFS.REQUEST.ID)
   OFS.REQUEST.ID = DATE():OFS.REQUEST.ID
   EXECUTE 'API.CALL.OFS.PHANTOM -Jb ':OCONV(LP$OFS.SOURCE:@FM:OFS.REQUEST.ID:@FM:L$OFS.MSG, 'MX') CAPTURING OUTPUT

   * waiting for response
   R.OFS.RESPONSE.QUEUE = ''
   OPEN 'F.OFS.RESPONSE.QUEUE' TO F.OFS.RESPONSE.QUEUE SETTING X THEN
      TIME.OUT = (IF LP$FUNCTION<2, 2> THEN LP$FUNCTION<2, 2> ELSE REQUEST.TIMEOUT) * 4
      LOOP
         TIME.OUT--
      WHILE TIME.OUT >= 0 AND NOT(R.OFS.RESPONSE.QUEUE)
         READ R.OFS.RESPONSE.QUEUE FROM F.OFS.RESPONSE.QUEUE, OFS.REQUEST.ID ELSE
            MSLEEP 100
         END
      REPEAT

      * force close phantom app
      IF NOT(R.OFS.RESPONSE.QUEUE) THEN
         READ R.PID FROM F.OFS.RESPONSE.QUEUE, OFS.REQUEST.ID:'.PID' THEN
            EXECUTE 'jkill -q ':R.PID<1>
         END
      END
   END

   IF NOT(R.OFS.RESPONSE.QUEUE) THEN
      R.OFS.RESPONSE.QUEUE = '-1':@FM:'OFS.ERROR:1:1=RESPONSE TIMEOUT'
   END
   
   * parse to OLD response format
   LP$RESULT<1> = R.OFS.RESPONSE.QUEUE<1>
   LP$RESULT<4> = ',':R.OFS.RESPONSE.QUEUE<3>
   IF R.OFS.RESPONSE.QUEUE<1> = 1 THEN
      LP$RESULT<2> = 'OK'
      LP$ID = R.OFS.RESPONSE.QUEUE<3>
   END ELSE
      LP$RESULT<2> =  R.OFS.RESPONSE.QUEUE<2>
      IF NOT(LP$ID) THEN
         LP$ID = R.OFS.RESPONSE.QUEUE<3>
      END
   END

END
